// -*- Groovy -*-

/*
  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent
*/

pipeline {
    agent {
      kubernetes {
        label 'release-component-remoting'
        yamlFile 'PodTemplates.d/release-linux.yaml'
        inheritFrom 'jnlp-linux'
      }
    }

    options {
      disableConcurrentBuilds()
    }

    environment {
      AZURE_VAULT_NAME              = 'prodreleasecore'
      AZURE_VAULT_CERT              = 'prodreleasecore'
      AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
      AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
      AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
      GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
      GPG_FILE                      = 'jenkins-release.gpg'
      MAVEN_REPOSITORY_USERNAME     = credentials('maven-repository-username')
      MAVEN_REPOSITORY_PASSWORD     = credentials('maven-repository-password')
      SIGN_STOREPASS                = credentials('signing-cert-pass')
      RELEASE_PROFILE               = "components/remoting"
    }

    stages {
      stage('Clone Remoting Git Repository') {
        steps {
          container('jnlp') {
            sshagent(['release-key']) {
              sh 'utils/release.sh --cloneReleaseGitRepository'
            }
          }
        }
      }
      stage('Clean Release') {
        steps {
          container('maven') {
            sh 'utils/release.sh --cleanRelease'
          }
        }
      }
      stage('Plan') {
        steps {
          container('maven') {
            sh 'utils/release.sh --showReleasePlan'
          }
        }
      }
      stage('Validate') {
        input {
          message 'Are you ok to proceed?'
        }
      }
      stage('Get Code Signing Certificate') {
        steps {
          container('azure-cli') {
            sh '''
              utils/release.sh --downloadAzureKeyvaultSecret
              utils/release.sh --configureKeystore
            '''
          }
        }
      }
      stage('Get GPG key') {
        steps {
          container('azure-cli') {
            sh '''
              utils/release.sh --getGPGKeyFromAzure
            '''
          }
        }
      }
      stage('Prepare Release') {
        steps {
          container('maven') {
            // Maven Release requires gpg key with password password and a certificate key with password
            sh '''
              utils/release.sh --configureGPG
              utils/release.sh --configureGit
              utils/release.sh --prepareRelease
            '''

            script {
              def properties = readProperties file: 'release/release.properties'
              env.RELEASE_SCM_TAG = properties['scm.tag']
            }
          }
        }
      }
      stage('Push Commits') {
        steps {
          container('jnlp') {
            sshagent(['release-key']) {
              sh 'utils/release.sh --pushCommits'
            }

          }
        }
      }
      stage('Stage Release') {
        steps {
          container('maven') {
            sh '''
              utils/release.sh --performRelease
            '''
          }
        }
      }
    }
    post {
      failure {
        input '''Can I delete the pod? '''
      }
    }
}
